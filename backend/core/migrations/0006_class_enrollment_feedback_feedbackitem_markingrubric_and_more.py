# Generated by Django 4.2.23 on 2025-08-26 09:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0005_widen_user_email_len"),
    ]

    operations = [
        migrations.CreateModel(
            name="Class",
            fields=[
                (
                    "class_id",
                    models.SmallAutoField(
                        db_comment="Unique identifier for a class under a unit",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "class_size",
                    models.SmallIntegerField(
                        db_comment="current number of students in the class"
                    ),
                ),
            ],
            options={
                "verbose_name": "class",
                "verbose_name_plural": "classes",
                "db_table": "class",
                "db_table_comment": "A table for class entity",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "enrollment_id",
                    models.AutoField(
                        db_comment="Unique identifier for each enrollment",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "enrollment_time",
                    models.DateTimeField(
                        db_comment="The time when the student is enrolled in the DBMS"
                    ),
                ),
            ],
            options={
                "db_table": "enrollment",
                "db_table_comment": "The enrollment of student to a specific class. A student can only have one enrollment to one class of one unit anytime.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                ("feedback_id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "feedback",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FeedbackItem",
            fields=[
                (
                    "feedback_item_id",
                    models.AutoField(
                        db_comment="unique identifier for feedback item",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "feedback_item_score",
                    models.SmallIntegerField(db_comment="actual score of the item"),
                ),
                (
                    "feedback_item_comment",
                    models.TextField(
                        blank=True,
                        db_comment="short description to the sub-item grade",
                        null=True,
                    ),
                ),
                (
                    "feedback_item_source",
                    models.CharField(
                        db_comment="the source of feedback: \nai, human, or revised if ai feedback is slightly modifed by human",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "db_table": "feedback_item",
                "db_table_comment": "A section in the feedback as per the rubric",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MarkingRubric",
            fields=[
                (
                    "rubric_id",
                    models.AutoField(
                        db_comment="unique identifier for rubrics",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rubric_create_time",
                    models.DateTimeField(
                        db_comment="timestamp when the rubirc is created"
                    ),
                ),
                (
                    "rubric_desc",
                    models.CharField(
                        blank=True,
                        db_comment="description to the rubrics",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "marking_rubric",
                "db_table_comment": "entity for a marking rubric. A marking rubric has many items.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RubricItem",
            fields=[
                (
                    "rubric_item_id",
                    models.AutoField(
                        db_comment="unique identifier for item",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rubric_item_name",
                    models.CharField(
                        db_comment="Title(header) name for the item", max_length=50
                    ),
                ),
                (
                    "rubric_item_weight",
                    models.DecimalField(
                        db_comment="the weight of the item on a scale of 100%, using xx.x",
                        decimal_places=1,
                        max_digits=3,
                    ),
                ),
            ],
            options={
                "db_table": "rubric_item",
                "db_table_comment": "An item(dimension) under one rubric",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RubricLevelDesc",
            fields=[
                (
                    "level_desc_id",
                    models.AutoField(
                        db_comment="unique identifier for each level desc under one rubric",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "level_min_score",
                    models.SmallIntegerField(db_comment="min for the item"),
                ),
                (
                    "level_max_score",
                    models.SmallIntegerField(db_comment="max for the item"),
                ),
                ("level_desc", models.TextField()),
            ],
            options={
                "db_table": "rubric_level_desc",
                "db_table_comment": "The detailed description to each of the score range under a rubric item under a rubric.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "submission_id",
                    models.AutoField(
                        db_comment="unique identifier for submission",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "submission_time",
                    models.DateTimeField(db_comment="time/date of submission"),
                ),
                (
                    "submission_txt",
                    models.TextField(
                        db_comment="complete content of the essay submission"
                    ),
                ),
            ],
            options={
                "db_table": "submission",
                "db_table_comment": "A weal entity for task submissions.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "task_id",
                    models.AutoField(
                        db_comment="Unique identifier for task.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "task_publish_datetime",
                    models.DateTimeField(
                        db_comment="time/date when the task is published"
                    ),
                ),
                (
                    "task_due_datetime",
                    models.DateTimeField(db_comment="time/date when the task is due"),
                ),
            ],
            options={
                "db_table": "task",
                "db_table_comment": "Task created by lecturer/admin for students in some classes/units to complete",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TeachingAssn",
            fields=[
                (
                    "teaching_assn_id",
                    models.SmallAutoField(
                        db_comment="unique identifier",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "db_table": "teaching_assn",
                "db_table_comment": "A weak entity for assignment of teacher to classes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Unit",
            fields=[
                (
                    "unit_id",
                    models.CharField(
                        db_comment="Unique identifier for each unit, same as the unit code",
                        max_length=10,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "unit_name",
                    models.CharField(db_comment="Full name of the unit", max_length=50),
                ),
                (
                    "unit_desc",
                    models.TextField(
                        blank=True, db_comment="details of the unit", null=True
                    ),
                ),
            ],
            options={
                "db_table": "unit",
                "db_table_comment": "A table for unit entity",
                "managed": False,
            },
        ),
        migrations.AlterModelTableComment(
            name="user",
            table_comment="A table for all user entities, including student, teacher, and admins.",
        ),
    ]
